{"ast":null,"code":"import { ref } from \"vue\";\nimport gnbBar from \"../components/gnbBar.vue\";\nimport TabsWrapper from \"../components/TabsWrapper.vue\";\nimport TabItem from \"../components/TabItem.vue\";\nimport boardList from \"../components/boardList.vue\";\nimport commentList from \"../components/commentList.vue\";\nimport recentBoardList from \"../components/recentBoardList.vue\";\nimport likeBoardList from \"../components/likeBoardList.vue\";\nimport axios from \"axios\";\naxios.defaults.baseURL = \"http://localhost:3000\";\naxios.defaults.headers.post[\"Content-Type\"] = \"application/json;charset=utf-8\";\naxios.defaults.headers.post[\"Access-Control-Allow-Origin\"] = \"*\";\nexport default {\n  components: {\n    gnbBar,\n    TabsWrapper,\n    TabItem,\n    boardList,\n    recentBoardList,\n    likeBoardList,\n    commentList\n  },\n  data() {\n    return {\n      email: \"\",\n      nick: \"\",\n      image: \"\",\n      provider: \"\",\n      editMode: false,\n      comment_editMode: false,\n      boardList: [],\n      recentBoardList: [],\n      likeBoardList: [],\n      commentList: [],\n      nodata: false,\n      norecentData: false,\n      noLikeData: false\n    };\n  },\n  created() {\n    this.email = localStorage.getItem(\"userID\");\n    this.nick = localStorage.getItem(\"userNick\");\n    this.image = localStorage.getItem(\"userImage\");\n    this.provider = localStorage.getItem(\"userProvider\");\n    this.boardListData();\n    this.recentBoardListData();\n    this.likeBoardListData();\n    this.commentListData();\n  },\n  methods: {\n    // 보드리스트 불러오기-------------------------------------------------------------------------------------------------------\n    // ---------------------------------------------------------------------------------------------------------------------\n    async boardListData() {\n      this.nodata = false;\n      try {\n        const response = await axios.post(\"/mypage/myCourse\", {\n          userEmail: this.email\n        });\n\n        // console.log(this.nodata);\n\n        this.boardList = response.data;\n        console.log(response.data);\n        if (this.boardList.length != 0) {\n          this.nodata = false;\n        } else {\n          this.nodata = true;\n        }\n      } catch {\n        this.nodata = true;\n        console.log(this.nodata);\n      }\n    },\n    // 최근에 본 게시글 리스트 불러오기-------------------------------------------------------------------------------------------------------\n    // ---------------------------------------------------------------------------------------------------------------------\n    async recentBoardListData() {\n      this.norecentData = false;\n      try {\n        const response = await axios.post(\"/mypage/recentCourse\", {\n          userEmail: this.email\n        });\n        this.recentBoardList = response.data;\n        if (this.norecentData.length != 0) {\n          this.norecentData = false;\n        } else {\n          this.norecentData = true;\n        }\n      } catch {\n        this.norecentData = true;\n      }\n    },\n    // 좋아요 리스트 불러오기-------------------------------------------------------------------------------------------------------\n    // ---------------------------------------------------------------------------------------------------------------------\n    async likeBoardListData() {\n      this.noLikeData = false;\n      try {\n        const response = await axios.post(\"/mypage/likeList\", {\n          userEmail: this.email\n        });\n        this.likeBoardList = response.data;\n        if (this.noLikeData.length != 0) {\n          this.noLikeData = false;\n        } else {\n          this.noLikeData = true;\n        }\n      } catch (error) {\n        console.error(error);\n      }\n    },\n    // 댓글 불러오기-------------------------------------------------------------------------------------------------------\n    // ---------------------------------------------------------------------------------------------------------------------\n    async commentListData() {\n      try {\n        const response = await axios.post(\"/mypage/myComment\", {\n          userEmail: this.email\n        });\n        this.commentList = response.data;\n      } catch (error) {\n        console.error(error);\n      }\n    },\n    // 내글 편집 삭제 수정 버튼-------------------------------------------------------------------------------------------------------\n    // ---------------------------------------------------------------------------------------------------------------------\n    toggleEditMode() {\n      this.editMode = true;\n    },\n    deleteContent() {\n      // // 선택된 항목들을 삭제하는 로직을 구현합니다.\n      // if (!this.selectedItems) {\n      //   return; // 선택된 항목이 없으면 종료합니다.\n      // }\n\n      // // 선택된 항목을 서버에 삭제 요청합니다.\n      // axios\n      //   .post(\"/mypage/delMyCourse\", { selectedItems })\n      //   .then((response) => {\n      //     // 서버로부터 응답을 받으면 클라이언트에서도 해당 항목을 삭제합니다.\n      //     if (response.data.success) {\n      //       // 삭제 요청이 성공한 경우\n      //       this.selectedItems.forEach((item) => {\n      //         const index = this.boardList.findIndex(\n      //           (board) => board.BRD_ID === item\n      //         );\n      //         if (index !== -1) {\n      //           this.boardList.splice(index, 1); // 선택된 항목을 배열에서 제거합니다.\n      //         }\n      //       });\n      //       this.selectedItems = []; // 선택된 항목 배열을 초기화합니다.\n      //     } else {\n      //       console.error(response.data.error);\n      //     }\n      //   })\n      //   .catch((error) => {\n      //     console.error(error);\n      //   });\n      function deleteUsers() {\n        const values = selectedUsers.value.map(user => user.member_id); // 선택된 유저의 member_id를 가져옵니다\n\n        location.reload();\n        if (values.length === 0) {\n          console.log(\"삭제할 컨텐츠가 없습니다\");\n          return;\n        }\n        if (window.confirm(\"정말로 선택된 회원을 삭제하시겠습니까?\")) {\n          axios.post(\"http://localhost:9212/api/manager_user\", {\n            values\n          }).then(res => {\n            if (res.data.code === 200) {\n              console.log(\"삭제 성공\");\n            }\n          }).catch(err => {\n            console.log(err);\n          });\n        } else {\n          console.log(\"삭제 취소\");\n        }\n      }\n    },\n    cancelEdit() {\n      this.editMode = false;\n    },\n    // 코멘트 글 편집 삭제 수정 버튼-------------------------------------------------------------------------------------------------------\n    // ---------------------------------------------------------------------------------------------------------------------\n    toggleCommentEditMode() {\n      console.log(\"toggleCommentEditMode 호출됨\");\n      this.comment_editMode = true;\n    },\n    deleteComment() {\n      // 코멘트 삭제 로직\n    },\n    cancelCommentEdit() {\n      console.log(\"cancelCommentEdit 호출됨\");\n      this.comment_editMode = false;\n    }\n  }\n};","map":{"version":3,"names":["ref","gnbBar","TabsWrapper","TabItem","boardList","commentList","recentBoardList","likeBoardList","axios","defaults","baseURL","headers","post","components","data","email","nick","image","provider","editMode","comment_editMode","nodata","norecentData","noLikeData","created","localStorage","getItem","boardListData","recentBoardListData","likeBoardListData","commentListData","methods","response","userEmail","console","log","length","error","toggleEditMode","deleteContent","deleteUsers","values","selectedUsers","value","map","user","member_id","location","reload","window","confirm","then","res","code","catch","err","cancelEdit","toggleCommentEditMode","deleteComment","cancelCommentEdit"],"sources":["/Users/seoyeonju/Library/CloudStorage/OneDrive-계원예술대학교/풀스텍/weave-wego 2/vue_front/src/views/myPage.vue"],"sourcesContent":["<style src=\"../assets/css/mypage.css\"></style>\r\n<style src=\"../assets/css/reset.css\"></style>\r\n<template>\r\n  <gnbBar />\r\n\r\n  <section class=\"mypage_profile_set\">\r\n    <!-- ----------------------------------------------------------------------------------------------------------------------------------- -->\r\n    <h1 class=\"mypage_title\">마이페이지</h1>\r\n    <div class=\"myprofile\">\r\n      <div class=\"profileimg\">\r\n        <div v-if=\"provider === 'local' && image !== 'default'\">\r\n          <img\r\n            class=\"kakao_profile_img\"\r\n            :src=\"`http://localhost:3000/downloadProfile/${email}/${image}`\"\r\n            alt=\"profileExample\"\r\n          />\r\n        </div>\r\n\r\n        <div v-else-if=\"provider === 'kakao'\">\r\n          <div\r\n            class=\"kakao_profile_img\"\r\n            :style=\"{ 'background-image': 'url(' + image + ')' }\"\r\n          ></div>\r\n        </div>\r\n        <div v-else-if=\"provider === 'naver'\">\r\n          <div\r\n            class=\"naver_profile_img\"\r\n            :style=\"{ 'background-image': 'url(' + image + ')' }\"\r\n          ></div>\r\n        </div>\r\n        <div v-else-if=\"image === 'default'\">\r\n          <img\r\n            class=\"kakao_profile_img\"\r\n            src=\"../assets/img/profileExample.png\"\r\n            alt=\"profileExample\"\r\n          />\r\n        </div>\r\n        <a href=\"/checkpw\"\r\n          ><img\r\n            class=\"setting_icon\"\r\n            src=\"../assets/img/setting_btn.png\"\r\n            alt=\"setting_btn\"\r\n        /></a>\r\n      </div>\r\n      <div class=\"nickname_email\">\r\n        <div class=\"nickname\">{{ nick }}</div>\r\n        <div class=\"email\">{{ email }}</div>\r\n      </div>\r\n    </div>\r\n  </section>\r\n  <section>\r\n    <TabsWrapper>\r\n      <TabItem title=\"내코스\">\r\n        <!-- 내코스--------------------------------------------------------------------------------------------------------------------\r\n        ------------------------------------------------------------------------------------------------------------------------ -->\r\n        <div v-if=\"!nodata\">\r\n          <button v-if=\"!editMode\" class=\"edit\" @click=\"toggleEditMode\">\r\n            &nbsp;&nbsp;편집&nbsp;&nbsp;\r\n          </button>\r\n          <button v-if=\"editMode\" class=\"delete\" @click=\"deleteContent\">\r\n            &nbsp;&nbsp;삭제&nbsp;&nbsp;\r\n          </button>\r\n          <button v-if=\"editMode\" class=\"cancel\" @click=\"cancelEdit\">\r\n            &nbsp;&nbsp;취소&nbsp;&nbsp;\r\n          </button>\r\n        </div>\r\n\r\n        <div class=\"course\">\r\n          <div id=\"nodata\" class=\"nodata\">작성한 게시글이 없습니다</div>\r\n          <boardList\r\n            v-if=\"!nodata\"\r\n            v-for=\"item in boardList\"\r\n            :boardList=\"item\"\r\n            :key=\"item.BRD_ID\"\r\n            :editMode=\"editMode\"\r\n          ></boardList>\r\n        </div>\r\n      </TabItem>\r\n\r\n      <TabItem title=\"최근에 본 코스\">\r\n        <!-- 최근에 본 코스--------------------------------------------------------------------------------------------------------------------\r\n        ------------------------------------------------------------------------------------------------------------------------ -->\r\n        <div class=\"course\">\r\n          <div id=\"norecentData\" class=\"nodata\">최근에 본 코스가 없습니다</div>\r\n          <recentBoardList\r\n            v-if=\"!norecentData\"\r\n            v-for=\"item in recentBoardList\"\r\n            :recentBoardList=\"item\"\r\n            :key=\"item.BRD_ID\"\r\n          /></div\r\n      ></TabItem>\r\n      <TabItem title=\"좋아요 리스트\">\r\n        <!-- 좋아요리스트--------------------------------------------------------------------------------------------------------------------\r\n        ------------------------------------------------------------------------------------------------------------------------ -->\r\n        <div class=\"course\">\r\n          <div id=\"noLikeData\" class=\"nodata\">좋아요 한 코스가 없습니다</div>\r\n          <likeBoardList\r\n            v-if=\"!noLikeData\"\r\n            v-for=\"item in likeBoardList\"\r\n            :likeBoardList=\"item\"\r\n            :key=\"item.id\"\r\n            :hideBrdOpen=\"true\"\r\n          /></div\r\n      ></TabItem>\r\n      <TabItem title=\"내가 쓴 댓글\">\r\n        <!-- 내가 쓴 댓글--------------------------------------------------------------------------------------------------------------------\r\n        ------------------------------------------------------------------------------------------------------------------------ -->\r\n        <div>\r\n          <button\r\n            v-if=\"!comment_editMode\"\r\n            class=\"edit\"\r\n            @click=\"toggleCommentEditMode\"\r\n          >\r\n            &nbsp;&nbsp;편집&nbsp;&nbsp;\r\n          </button>\r\n          <button v-if=\"comment_editMode\" class=\"delete\" @click=\"deleteComment\">\r\n            &nbsp;&nbsp;삭제&nbsp;&nbsp;\r\n          </button>\r\n          <button\r\n            v-if=\"comment_editMode\"\r\n            class=\"cancel\"\r\n            @click=\"cancelCommentEdit\"\r\n          >\r\n            &nbsp;&nbsp;취소&nbsp;&nbsp;\r\n          </button>\r\n        </div>\r\n        <!-- <button class=\"comment_edit\">&nbsp;&nbsp;편집&nbsp;&nbsp;</button> -->\r\n\r\n        <div class=\"commentlist\">\r\n          <commentList\r\n            v-for=\"item in commentList\"\r\n            :commentList=\"item\"\r\n            :key=\"item.COM_ID\"\r\n            :comment_editMode=\"comment_editMode\"\r\n          />\r\n        </div>\r\n      </TabItem>\r\n    </TabsWrapper>\r\n  </section>\r\n</template>\r\n\r\n<script>\r\nimport { ref } from \"vue\";\r\nimport gnbBar from \"../components/gnbBar.vue\";\r\nimport TabsWrapper from \"../components/TabsWrapper.vue\";\r\nimport TabItem from \"../components/TabItem.vue\";\r\nimport boardList from \"../components/boardList.vue\";\r\nimport commentList from \"../components/commentList.vue\";\r\nimport recentBoardList from \"../components/recentBoardList.vue\";\r\nimport likeBoardList from \"../components/likeBoardList.vue\";\r\nimport axios from \"axios\";\r\naxios.defaults.baseURL = \"http://localhost:3000\";\r\naxios.defaults.headers.post[\"Content-Type\"] = \"application/json;charset=utf-8\";\r\naxios.defaults.headers.post[\"Access-Control-Allow-Origin\"] = \"*\";\r\n\r\nexport default {\r\n  components: {\r\n    gnbBar,\r\n    TabsWrapper,\r\n    TabItem,\r\n    boardList,\r\n    recentBoardList,\r\n    likeBoardList,\r\n    commentList,\r\n  },\r\n  data() {\r\n    return {\r\n      email: \"\",\r\n      nick: \"\",\r\n      image: \"\",\r\n      provider: \"\",\r\n      editMode: false,\r\n      comment_editMode: false,\r\n      boardList: [],\r\n      recentBoardList: [],\r\n      likeBoardList: [],\r\n      commentList: [],\r\n      nodata: false,\r\n      norecentData: false,\r\n      noLikeData: false,\r\n    };\r\n  },\r\n  created() {\r\n    this.email = localStorage.getItem(\"userID\");\r\n    this.nick = localStorage.getItem(\"userNick\");\r\n    this.image = localStorage.getItem(\"userImage\");\r\n    this.provider = localStorage.getItem(\"userProvider\");\r\n    this.boardListData();\r\n    this.recentBoardListData();\r\n    this.likeBoardListData();\r\n    this.commentListData();\r\n  },\r\n  methods: {\r\n    // 보드리스트 불러오기-------------------------------------------------------------------------------------------------------\r\n    // ---------------------------------------------------------------------------------------------------------------------\r\n    async boardListData() {\r\n      this.nodata = false;\r\n      try {\r\n        const response = await axios.post(\"/mypage/myCourse\", {\r\n          userEmail: this.email,\r\n        });\r\n\r\n        // console.log(this.nodata);\r\n\r\n        this.boardList = response.data;\r\n        console.log(response.data);\r\n        if (this.boardList.length != 0) {\r\n          this.nodata = false;\r\n        } else {\r\n          this.nodata = true;\r\n        }\r\n      } catch {\r\n        this.nodata = true;\r\n        console.log(this.nodata);\r\n      }\r\n    },\r\n    // 최근에 본 게시글 리스트 불러오기-------------------------------------------------------------------------------------------------------\r\n    // ---------------------------------------------------------------------------------------------------------------------\r\n    async recentBoardListData() {\r\n      this.norecentData = false;\r\n      try {\r\n        const response = await axios.post(\"/mypage/recentCourse\", {\r\n          userEmail: this.email,\r\n        });\r\n        this.recentBoardList = response.data;\r\n        if (this.norecentData.length != 0) {\r\n          this.norecentData = false;\r\n        } else {\r\n          this.norecentData = true;\r\n        }\r\n      } catch {\r\n        this.norecentData = true;\r\n      }\r\n    },\r\n    // 좋아요 리스트 불러오기-------------------------------------------------------------------------------------------------------\r\n    // ---------------------------------------------------------------------------------------------------------------------\r\n    async likeBoardListData() {\r\n      this.noLikeData = false;\r\n      try {\r\n        const response = await axios.post(\"/mypage/likeList\", {\r\n          userEmail: this.email,\r\n        });\r\n        this.likeBoardList = response.data;\r\n        if (this.noLikeData.length != 0) {\r\n          this.noLikeData = false;\r\n        } else {\r\n          this.noLikeData = true;\r\n        }\r\n      } catch (error) {\r\n        console.error(error);\r\n      }\r\n    },\r\n    // 댓글 불러오기-------------------------------------------------------------------------------------------------------\r\n    // ---------------------------------------------------------------------------------------------------------------------\r\n    async commentListData() {\r\n      try {\r\n        const response = await axios.post(\"/mypage/myComment\", {\r\n          userEmail: this.email,\r\n        });\r\n        this.commentList = response.data;\r\n      } catch (error) {\r\n        console.error(error);\r\n      }\r\n    },\r\n    // 내글 편집 삭제 수정 버튼-------------------------------------------------------------------------------------------------------\r\n    // ---------------------------------------------------------------------------------------------------------------------\r\n    toggleEditMode() {\r\n      this.editMode = true;\r\n    },\r\n    deleteContent() {\r\n      // // 선택된 항목들을 삭제하는 로직을 구현합니다.\r\n      // if (!this.selectedItems) {\r\n      //   return; // 선택된 항목이 없으면 종료합니다.\r\n      // }\r\n\r\n      // // 선택된 항목을 서버에 삭제 요청합니다.\r\n      // axios\r\n      //   .post(\"/mypage/delMyCourse\", { selectedItems })\r\n      //   .then((response) => {\r\n      //     // 서버로부터 응답을 받으면 클라이언트에서도 해당 항목을 삭제합니다.\r\n      //     if (response.data.success) {\r\n      //       // 삭제 요청이 성공한 경우\r\n      //       this.selectedItems.forEach((item) => {\r\n      //         const index = this.boardList.findIndex(\r\n      //           (board) => board.BRD_ID === item\r\n      //         );\r\n      //         if (index !== -1) {\r\n      //           this.boardList.splice(index, 1); // 선택된 항목을 배열에서 제거합니다.\r\n      //         }\r\n      //       });\r\n      //       this.selectedItems = []; // 선택된 항목 배열을 초기화합니다.\r\n      //     } else {\r\n      //       console.error(response.data.error);\r\n      //     }\r\n      //   })\r\n      //   .catch((error) => {\r\n      //     console.error(error);\r\n      //   });\r\n      function deleteUsers() {\r\n        const values = selectedUsers.value.map((user) => user.member_id); // 선택된 유저의 member_id를 가져옵니다\r\n\r\n        location.reload();\r\n        if (values.length === 0) {\r\n          console.log(\"삭제할 컨텐츠가 없습니다\");\r\n          return;\r\n        }\r\n\r\n        if (window.confirm(\"정말로 선택된 회원을 삭제하시겠습니까?\")) {\r\n          axios\r\n            .post(\"http://localhost:9212/api/manager_user\", { values })\r\n            .then((res) => {\r\n              if (res.data.code === 200) {\r\n                console.log(\"삭제 성공\");\r\n              }\r\n            })\r\n            .catch((err) => {\r\n              console.log(err);\r\n            });\r\n        } else {\r\n          console.log(\"삭제 취소\");\r\n        }\r\n      }\r\n    },\r\n    cancelEdit() {\r\n      this.editMode = false;\r\n    },\r\n    // 코멘트 글 편집 삭제 수정 버튼-------------------------------------------------------------------------------------------------------\r\n    // ---------------------------------------------------------------------------------------------------------------------\r\n    toggleCommentEditMode() {\r\n      console.log(\"toggleCommentEditMode 호출됨\");\r\n      this.comment_editMode = true;\r\n    },\r\n    deleteComment() {\r\n      // 코멘트 삭제 로직\r\n    },\r\n    cancelCommentEdit() {\r\n      console.log(\"cancelCommentEdit 호출됨\");\r\n      this.comment_editMode = false;\r\n    },\r\n  },\r\n};\r\n</script>\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}